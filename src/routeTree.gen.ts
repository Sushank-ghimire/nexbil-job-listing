/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const JobsIndexLazyImport = createFileRoute('/jobs/')()
const FavouriteIndexLazyImport = createFileRoute('/favourite/')()
const ContactIndexLazyImport = createFileRoute('/contact/')()
const AboutIndexLazyImport = createFileRoute('/about/')()
const JobsJobIdLazyImport = createFileRoute('/jobs/$jobId')()

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const JobsIndexLazyRoute = JobsIndexLazyImport.update({
  id: '/jobs/',
  path: '/jobs/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/jobs/index.lazy').then((d) => d.Route))

const FavouriteIndexLazyRoute = FavouriteIndexLazyImport.update({
  id: '/favourite/',
  path: '/favourite/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/favourite/index.lazy').then((d) => d.Route),
)

const ContactIndexLazyRoute = ContactIndexLazyImport.update({
  id: '/contact/',
  path: '/contact/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/contact/index.lazy').then((d) => d.Route))

const AboutIndexLazyRoute = AboutIndexLazyImport.update({
  id: '/about/',
  path: '/about/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about/index.lazy').then((d) => d.Route))

const JobsJobIdLazyRoute = JobsJobIdLazyImport.update({
  id: '/jobs/$jobId',
  path: '/jobs/$jobId',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/jobs/$jobId.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/jobs/$jobId': {
      id: '/jobs/$jobId'
      path: '/jobs/$jobId'
      fullPath: '/jobs/$jobId'
      preLoaderRoute: typeof JobsJobIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/about/': {
      id: '/about/'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/contact/': {
      id: '/contact/'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/favourite/': {
      id: '/favourite/'
      path: '/favourite'
      fullPath: '/favourite'
      preLoaderRoute: typeof FavouriteIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/jobs/': {
      id: '/jobs/'
      path: '/jobs'
      fullPath: '/jobs'
      preLoaderRoute: typeof JobsIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/jobs/$jobId': typeof JobsJobIdLazyRoute
  '/about': typeof AboutIndexLazyRoute
  '/contact': typeof ContactIndexLazyRoute
  '/favourite': typeof FavouriteIndexLazyRoute
  '/jobs': typeof JobsIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/jobs/$jobId': typeof JobsJobIdLazyRoute
  '/about': typeof AboutIndexLazyRoute
  '/contact': typeof ContactIndexLazyRoute
  '/favourite': typeof FavouriteIndexLazyRoute
  '/jobs': typeof JobsIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/jobs/$jobId': typeof JobsJobIdLazyRoute
  '/about/': typeof AboutIndexLazyRoute
  '/contact/': typeof ContactIndexLazyRoute
  '/favourite/': typeof FavouriteIndexLazyRoute
  '/jobs/': typeof JobsIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/jobs/$jobId'
    | '/about'
    | '/contact'
    | '/favourite'
    | '/jobs'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/jobs/$jobId' | '/about' | '/contact' | '/favourite' | '/jobs'
  id:
    | '__root__'
    | '/'
    | '/jobs/$jobId'
    | '/about/'
    | '/contact/'
    | '/favourite/'
    | '/jobs/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  JobsJobIdLazyRoute: typeof JobsJobIdLazyRoute
  AboutIndexLazyRoute: typeof AboutIndexLazyRoute
  ContactIndexLazyRoute: typeof ContactIndexLazyRoute
  FavouriteIndexLazyRoute: typeof FavouriteIndexLazyRoute
  JobsIndexLazyRoute: typeof JobsIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  JobsJobIdLazyRoute: JobsJobIdLazyRoute,
  AboutIndexLazyRoute: AboutIndexLazyRoute,
  ContactIndexLazyRoute: ContactIndexLazyRoute,
  FavouriteIndexLazyRoute: FavouriteIndexLazyRoute,
  JobsIndexLazyRoute: JobsIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/jobs/$jobId",
        "/about/",
        "/contact/",
        "/favourite/",
        "/jobs/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/jobs/$jobId": {
      "filePath": "jobs/$jobId.lazy.tsx"
    },
    "/about/": {
      "filePath": "about/index.lazy.tsx"
    },
    "/contact/": {
      "filePath": "contact/index.lazy.tsx"
    },
    "/favourite/": {
      "filePath": "favourite/index.lazy.tsx"
    },
    "/jobs/": {
      "filePath": "jobs/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
